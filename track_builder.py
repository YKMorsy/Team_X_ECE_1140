import random
import sys
import track_block
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
class Ui_track_model_test_window(object):
    def setupUi(self, track_model_test_window):
        track_model_test_window.setObjectName("track_model_test_window")
        track_model_test_window.resize(662, 514)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        track_model_test_window.setPalette(palette)
        self.select_track_combo = QtWidgets.QComboBox(track_model_test_window)
        self.select_track_combo.setGeometry(QtCore.QRect(240, 80, 121, 31))
        self.select_track_combo.setObjectName("select_track_combo")
        self.select_block_combo = QtWidgets.QComboBox(track_model_test_window)
        self.select_block_combo.setGeometry(QtCore.QRect(240, 160, 121, 31))
        self.select_block_combo.setObjectName("select_block_combo")
        self.track_select_lb = QtWidgets.QLabel(track_model_test_window)
        self.track_select_lb.setGeometry(QtCore.QRect(230, 30, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.track_select_lb.setFont(font)
        self.track_select_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.track_select_lb.setObjectName("track_select_lb")
        self.block_select_lb = QtWidgets.QLabel(track_model_test_window)
        self.block_select_lb.setGeometry(QtCore.QRect(230, 120, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.block_select_lb.setFont(font)
        self.block_select_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.block_select_lb.setObjectName("block_select_lb")
        self.clear_failure_lb = QtWidgets.QLabel(track_model_test_window)
        self.clear_failure_lb.setGeometry(QtCore.QRect(450, 40, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.clear_failure_lb.setFont(font)
        self.clear_failure_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.clear_failure_lb.setObjectName("clear_failure_lb")
        self.toggle_switch_lb = QtWidgets.QLabel(track_model_test_window)
        self.toggle_switch_lb.setGeometry(QtCore.QRect(460, 120, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.toggle_switch_lb.setFont(font)
        self.toggle_switch_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.toggle_switch_lb.setObjectName("toggle_switch_lb")
        self.clear_failure_bt = QtWidgets.QPushButton(track_model_test_window)
        self.clear_failure_bt.setGeometry(QtCore.QRect(470, 90, 111, 31))
        self.clear_failure_bt.setObjectName("clear_failure_bt")
        self.toggle_switch_bt = QtWidgets.QPushButton(track_model_test_window)
        self.toggle_switch_bt.setGeometry(QtCore.QRect(470, 160, 111, 31))
        self.toggle_switch_bt.setObjectName("toggle_switch_bt")
        self.show_signal = QtWidgets.QTableWidget(track_model_test_window)
        self.show_signal.setGeometry(QtCore.QRect(170, 310, 311, 111))
        self.show_signal.setAutoFillBackground(False)
        self.show_signal.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.show_signal.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.show_signal.setLineWidth(2)
        self.show_signal.setMidLineWidth(3)
        self.show_signal.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.show_signal.setAlternatingRowColors(True)
        self.show_signal.setRowCount(2)
        self.show_signal.setColumnCount(3)
        self.show_signal.setObjectName("show_signal")
        item = QtWidgets.QTableWidgetItem()
        self.show_signal.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.show_signal.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.show_signal.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.show_signal.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.show_signal.setHorizontalHeaderItem(2, item)
        self.show_signal.horizontalHeader().setCascadingSectionResizes(True)
        self.show_signal.horizontalHeader().setMinimumSectionSize(30)
        self.show_signal.horizontalHeader().setSortIndicatorShown(False)
        self.show_signal.horizontalHeader().setStretchLastSection(True)
        self.show_signal.verticalHeader().setVisible(False)
        self.show_signal.verticalHeader().setCascadingSectionResizes(False)
        self.show_signal.verticalHeader().setSortIndicatorShown(True)
        self.show_signal.verticalHeader().setStretchLastSection(True)
        self.toggle_crossing_bt = QtWidgets.QPushButton(track_model_test_window)
        self.toggle_crossing_bt.setGeometry(QtCore.QRect(60, 160, 111, 31))
        self.toggle_crossing_bt.setObjectName("toggle_crossing_bt")
        self.toggle_occupancy_bt = QtWidgets.QPushButton(track_model_test_window)
        self.toggle_occupancy_bt.setGeometry(QtCore.QRect(60, 90, 111, 31))
        self.toggle_occupancy_bt.setObjectName("toggle_occupancy_bt")
        self.toggle_occupancy_lb = QtWidgets.QLabel(track_model_test_window)
        self.toggle_occupancy_lb.setGeometry(QtCore.QRect(40, 40, 171, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.toggle_occupancy_lb.setFont(font)
        self.toggle_occupancy_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.toggle_occupancy_lb.setObjectName("toggle_occupancy_lb")
        self.toggle_crossing_lb = QtWidgets.QLabel(track_model_test_window)
        self.toggle_crossing_lb.setGeometry(QtCore.QRect(40, 120, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.toggle_crossing_lb.setFont(font)
        self.toggle_crossing_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.toggle_crossing_lb.setObjectName("toggle_crossing_lb")

        self.retranslateUi(track_model_test_window)
        QtCore.QMetaObject.connectSlotsByName(track_model_test_window)

    def retranslateUi(self, track_model_test_window):
        _translate = QtCore.QCoreApplication.translate
        track_model_test_window.setWindowTitle(_translate("track_model_test_window", "Track Model Test"))
        self.track_select_lb.setText(_translate("track_model_test_window", "Select Track:"))
        self.block_select_lb.setText(_translate("track_model_test_window", "Select Block:"))
        self.clear_failure_lb.setText(_translate("track_model_test_window", "Clear Failure:"))
        self.toggle_switch_lb.setText(_translate("track_model_test_window", "Toggle Switch:"))
        self.clear_failure_bt.setText(_translate("track_model_test_window", "Select"))
        self.toggle_switch_bt.setText(_translate("track_model_test_window", "Select"))
        self.show_signal.setSortingEnabled(False)
        item = self.show_signal.verticalHeaderItem(0)
        item.setText(_translate("track_model_test_window", "data"))
        item = self.show_signal.verticalHeaderItem(1)
        item.setText(_translate("track_model_test_window", "data2"))
        item = self.show_signal.horizontalHeaderItem(0)
        item.setText(_translate("track_model_test_window", "Input"))
        item = self.show_signal.horizontalHeaderItem(1)
        item.setText(_translate("track_model_test_window", "Expected"))
        item = self.show_signal.horizontalHeaderItem(2)
        item.setText(_translate("track_model_test_window", "Pass"))
        self.toggle_crossing_bt.setText(_translate("track_model_test_window", "PushButton"))
        self.toggle_occupancy_bt.setText(_translate("track_model_test_window", "PushButton"))
        self.toggle_occupancy_lb.setText(_translate("track_model_test_window", "Toggle Occupancy:"))
        self.toggle_crossing_lb.setText(_translate("track_model_test_window", "Toggle Crossing:"))


class Ui_Track_Model(object):
    track_list = np.empty(15,track_block.block)
    red_line_len = 0
    blue_line_len = 0
    green_line_len = 0
    def setupUi(self, Track_Model):
        self.track_model_test_window = QtWidgets.QWidget()
        self.window = Ui_track_model_test_window()
        self.window.setupUi(self.track_model_test_window)
        
        Track_Model.setObjectName("Track_Model")
        Track_Model.resize(800, 902)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        Track_Model.setPalette(palette)
        Track_Model.setAutoFillBackground(True)
        self.centralwidget = QtWidgets.QWidget(Track_Model)
        self.centralwidget.setObjectName("centralwidget")
        self.load_button = QtWidgets.QPushButton(self.centralwidget)
        self.load_button.setGeometry(QtCore.QRect(180, 90, 75, 23))
        self.load_button.setObjectName("load_button")
        self.track_load_text = QtWidgets.QTextEdit(self.centralwidget)
        self.track_load_text.setGeometry(QtCore.QRect(80, 50, 281, 31))
        self.track_load_text.setObjectName("track_load_text")
        self.load_track_label = QtWidgets.QLabel(self.centralwidget)
        self.load_track_label.setGeometry(QtCore.QRect(100, 20, 251, 21))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.load_track_label.setFont(font)
        self.load_track_label.setObjectName("load_track_label")
        self.track_info_table = QtWidgets.QTableWidget(self.centralwidget)
        self.track_info_table.setGeometry(QtCore.QRect(10, 670, 781, 181))
        self.track_info_table.setSizeIncrement(QtCore.QSize(0, 0))
        self.track_info_table.setBaseSize(QtCore.QSize(4, 3))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.track_info_table.setFont(font)
        self.track_info_table.setFrameShape(QtWidgets.QFrame.Box)
        self.track_info_table.setFrameShadow(QtWidgets.QFrame.Raised)
        self.track_info_table.setLineWidth(2)
        self.track_info_table.setAlternatingRowColors(True)
        self.track_info_table.setRowCount(2)
        self.track_info_table.setColumnCount(4)
        self.track_info_table.setObjectName("track_info_table")
        item = QtWidgets.QTableWidgetItem()
        self.track_info_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.track_info_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.track_info_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.track_info_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.track_info_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.track_info_table.setHorizontalHeaderItem(3, item)
        self.track_info_table.horizontalHeader().setVisible(True)
        self.track_info_table.horizontalHeader().setCascadingSectionResizes(True)
        self.track_info_table.horizontalHeader().setDefaultSectionSize(199)
        self.track_info_table.horizontalHeader().setMinimumSectionSize(25)
        self.track_info_table.horizontalHeader().setSortIndicatorShown(False)
        self.track_info_table.horizontalHeader().setStretchLastSection(True)
        self.track_info_table.verticalHeader().setVisible(False)
        self.track_info_table.verticalHeader().setCascadingSectionResizes(False)
        self.track_info_table.verticalHeader().setMinimumSectionSize(55)
        self.track_info_table.verticalHeader().setStretchLastSection(True)
        self.broken_rail_bt = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.broken_rail_bt.setGeometry(QtCore.QRect(620, 150, 41, 41))
        self.broken_rail_bt.setText("")
        self.broken_rail_bt.setObjectName("broken_rail_bt")
        self.circuit_failure_bt = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.circuit_failure_bt.setGeometry(QtCore.QRect(620, 260, 41, 41))
        self.circuit_failure_bt.setText("")
        self.circuit_failure_bt.setObjectName("circuit_failure_bt")
        self.power_failure_bt = QtWidgets.QCommandLinkButton(self.centralwidget)
        self.power_failure_bt.setGeometry(QtCore.QRect(620, 360, 41, 41))
        self.power_failure_bt.setText("")
        self.power_failure_bt.setObjectName("power_failure_bt")
        self.failure_line_select_combo = QtWidgets.QComboBox(self.centralwidget)
        self.failure_line_select_combo.setGeometry(QtCore.QRect(570, 60, 141, 31))
        self.failure_line_select_combo.setObjectName("failure_line_select_combo")
        self.line_select_label = QtWidgets.QLabel(self.centralwidget)
        self.line_select_label.setGeometry(QtCore.QRect(580, 10, 121, 41))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.line_select_label.setFont(font)
        self.line_select_label.setObjectName("line_select_label")
        self.randomize_broken_rail_lb = QtWidgets.QLabel(self.centralwidget)
        self.randomize_broken_rail_lb.setGeometry(QtCore.QRect(550, 110, 181, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.randomize_broken_rail_lb.setFont(font)
        self.randomize_broken_rail_lb.setObjectName("randomize_broken_rail_lb")
        self.randomize_circuit_failure_lb = QtWidgets.QLabel(self.centralwidget)
        self.randomize_circuit_failure_lb.setGeometry(QtCore.QRect(550, 220, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.randomize_circuit_failure_lb.setFont(font)
        self.randomize_circuit_failure_lb.setObjectName("randomize_circuit_failure_lb")
        self.randomize_power_failure_lb = QtWidgets.QLabel(self.centralwidget)
        self.randomize_power_failure_lb.setGeometry(QtCore.QRect(550, 300, 191, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.randomize_power_failure_lb.setFont(font)
        self.randomize_power_failure_lb.setObjectName("randomize_power_failure_lb")
        self.failure_type_combo = QtWidgets.QComboBox(self.centralwidget)
        self.failure_type_combo.setGeometry(QtCore.QRect(570, 450, 141, 31))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(10)
        self.failure_type_combo.setFont(font)
        self.failure_type_combo.setObjectName("failure_type_combo")
        self.failure_type_combo.addItem("")
        self.failure_type_combo.addItem("")
        self.failure_type_combo.addItem("")
        self.failure_type_lb = QtWidgets.QLabel(self.centralwidget)
        self.failure_type_lb.setGeometry(QtCore.QRect(580, 410, 151, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.failure_type_lb.setFont(font)
        self.failure_type_lb.setObjectName("failure_type_lb")
        self.select_blocks_lb = QtWidgets.QLabel(self.centralwidget)
        self.select_blocks_lb.setGeometry(QtCore.QRect(590, 500, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.select_blocks_lb.setFont(font)
        self.select_blocks_lb.setObjectName("select_blocks_lb")
        self.failure_text_box = QtWidgets.QTextEdit(self.centralwidget)
        self.failure_text_box.setGeometry(QtCore.QRect(553, 530, 171, 31))
        self.failure_text_box.setObjectName("failure_text_box")
        self.failure_select_bt = QtWidgets.QPushButton(self.centralwidget)
        self.failure_select_bt.setGeometry(QtCore.QRect(600, 580, 75, 23))
        self.failure_select_bt.setObjectName("failure_select_bt")
        self.block_status_lb = QtWidgets.QLabel(self.centralwidget)
        self.block_status_lb.setGeometry(QtCore.QRect(150, 120, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.block_status_lb.setFont(font)
        self.block_status_lb.setObjectName("block_status_lb")
        self.select_track_combo = QtWidgets.QComboBox(self.centralwidget)
        self.select_track_combo.setGeometry(QtCore.QRect(170, 200, 91, 31))
        self.select_track_combo.setAutoFillBackground(True)
        self.select_track_combo.setObjectName("select_track_combo")
        self.select_block_combo = QtWidgets.QComboBox(self.centralwidget)
        self.select_block_combo.setGeometry(QtCore.QRect(170, 290, 91, 31))
        self.select_block_combo.setAccessibleName("")
        self.select_block_combo.setInputMethodHints(QtCore.Qt.ImhSensitiveData)
        self.select_block_combo.setCurrentText("")
        self.select_block_combo.setObjectName("select_block_combo")
        
        
        #start of button connections
        self.select_track_combo.currentIndexChanged.connect(self.set_block_info_combo)
        self.select_block_combo.currentIndexChanged.connect(self.set_block_status_table)
        self.broken_rail_bt.clicked.connect(self.randomize_broken_rail)
        self.circuit_failure_bt.clicked.connect(self.randomize_circuit_failure)
        self.power_failure_bt.clicked.connect(self.randomize_power_failure)
        self.failure_select_bt.clicked.connect(self.failure_select)
        self.window.clear_failure_bt.clicked.connect(self.clear_failure)
        self.window.toggle_switch_bt.clicked.connect(self.toggle_switch)
        self.window.toggle_occupancy_bt.clicked.connect(self.toggle_occupancy)
        
        self.block_status_table = QtWidgets.QTableWidget(self.centralwidget)
        self.block_status_table.setGeometry(QtCore.QRect(80, 340, 261, 311))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(10)
        self.block_status_table.setFont(font)
        self.block_status_table.setLineWidth(3)
        self.block_status_table.setMidLineWidth(3)
        self.block_status_table.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.block_status_table.setAlternatingRowColors(True)
        self.block_status_table.setColumnCount(1)
        self.block_status_table.setObjectName("block_status_table")
        self.block_status_table.setRowCount(10)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.block_status_table.setVerticalHeaderItem(9, item)
        self.block_status_table.horizontalHeader().setVisible(False)
        self.block_status_table.horizontalHeader().setCascadingSectionResizes(True)
        self.block_status_table.horizontalHeader().setSortIndicatorShown(False)
        self.block_status_table.horizontalHeader().setStretchLastSection(True)
        self.block_status_table.verticalHeader().setCascadingSectionResizes(True)
        self.block_status_table.verticalHeader().setSortIndicatorShown(True)
        self.block_status_table.verticalHeader().setStretchLastSection(True)
        self.block_status_track_lb = QtWidgets.QLabel(self.centralwidget)
        self.block_status_track_lb.setGeometry(QtCore.QRect(170, 160, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        self.block_status_track_lb.setFont(font)
        self.block_status_track_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.block_status_track_lb.setObjectName("block_status_track_lb")
        self.block_status_block_lb = QtWidgets.QLabel(self.centralwidget)
        self.block_status_block_lb.setGeometry(QtCore.QRect(160, 240, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(12)
        self.block_status_block_lb.setFont(font)
        self.block_status_block_lb.setAlignment(QtCore.Qt.AlignCenter)
        self.block_status_block_lb.setObjectName("block_status_block_lb")
        Track_Model.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Track_Model)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        Track_Model.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Track_Model)
        self.statusbar.setObjectName("statusbar")
        Track_Model.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(Track_Model)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(Track_Model)
        self.actionSave.setObjectName("actionSave")
        self.actionExit = QtWidgets.QAction(Track_Model)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())
        self.load_button.clicked.connect(self.load_button_pressed)
        self.retranslateUi(Track_Model)
        QtCore.QMetaObject.connectSlotsByName(Track_Model)
        self.actionNew.triggered.connect(self.show_test_window)
        self.actionExit.triggered.connect(QtWidgets.qApp.quit)

    def retranslateUi(self, Track_Model):
        _translate = QtCore.QCoreApplication.translate
        Track_Model.setWindowTitle(_translate("Track_Model", "Track Model"))
        self.load_button.setText(_translate("Track_Model", "select"))
        self.load_track_label.setText(_translate("Track_Model", "Load Track Database:"))
        item = self.track_info_table.verticalHeaderItem(0)
        item.setText(_translate("Track_Model", "New Row"))
        item = self.track_info_table.verticalHeaderItem(1)
        item.setText(_translate("Track_Model", "New Row"))
        item = self.track_info_table.horizontalHeaderItem(0)
        item.setText(_translate("Track_Model", "Track"))
        item = self.track_info_table.horizontalHeaderItem(1)
        item.setText(_translate("Track_Model", "Status"))
        item = self.track_info_table.horizontalHeaderItem(2)
        item.setText(_translate("Track_Model", "Failure Type"))
        item = self.track_info_table.horizontalHeaderItem(3)
        item.setText(_translate("Track_Model", "Location"))
        self.line_select_label.setText(_translate("Track_Model", "Select Line:"))
        self.randomize_broken_rail_lb.setText(_translate("Track_Model", "Randomize Broken Rail:"))
        self.randomize_circuit_failure_lb.setText(_translate("Track_Model", "Randomize Circuit Failure:"))
        self.randomize_power_failure_lb.setText(_translate("Track_Model", "Randomize Power Failure:"))
        self.failure_type_combo.setItemText(0, _translate("Track_Model", "Broken Rail"))
        self.failure_type_combo.setItemText(1, _translate("Track_Model", "Circuit Failure"))
        self.failure_type_combo.setItemText(2, _translate("Track_Model", "Power Failure"))
        self.failure_type_lb.setText(_translate("Track_Model", "Failure Type:"))
        self.select_blocks_lb.setText(_translate("Track_Model", "Select Blocks:"))
        self.failure_select_bt.setText(_translate("Track_Model", "select"))
        self.block_status_lb.setText(_translate("Track_Model", "Block Status:"))
        self.select_block_combo.setWhatsThis(_translate("Track_Model", "Block #"))
        item = self.block_status_table.verticalHeaderItem(0)
        item.setText(_translate("Track_Model", "Block:"))
        item = self.block_status_table.verticalHeaderItem(1)
        item.setText(_translate("Track_Model", "Length:"))
        item = self.block_status_table.verticalHeaderItem(2)
        item.setText(_translate("Track_Model", "Grade:"))
        item = self.block_status_table.verticalHeaderItem(3)
        item.setText(_translate("Track_Model", "Elevation:"))
        item = self.block_status_table.verticalHeaderItem(4)
        item.setText(_translate("Track_Model", "Max Speed:"))
        item = self.block_status_table.verticalHeaderItem(5)
        item.setText(_translate("Track_Model", "Above/Underground:"))
        item = self.block_status_table.verticalHeaderItem(6)
        item.setText(_translate("Track_Model", "Occupancy:"))
        item = self.block_status_table.verticalHeaderItem(7)
        item.setText(_translate("Track_Model", "Station:"))
        item = self.block_status_table.verticalHeaderItem(8)
        item.setText(_translate("Track_Model", "Crossing:"))
        item = self.block_status_table.verticalHeaderItem(9)
        item.setText(_translate("Track_Model", "Forward to Block:"))
        self.block_status_track_lb.setText(_translate("Track_Model", "Select Line:"))
        self.block_status_block_lb.setText(_translate("Track_Model", "Select Block:"))
        self.menuFile.setTitle(_translate("Track_Model", "File"))
        self.actionNew.setText(_translate("Track_Model", "Open Test Unit"))
        self.actionSave.setText(_translate("Track_Model", "Save"))
        self.actionSave.setStatusTip(_translate("Track_Model", "Save track model"))
        self.actionSave.setShortcut(_translate("Track_Model", "Ctrl+S"))
        self.actionExit.setText(_translate("Track_Model", "Exit"))
        
    def load_button_pressed(self):
        doc_title = self.track_load_text.toPlainText()
        self.track_load_text.clear()
        if ".xlsx" not in doc_title:
            msg = QtWidgets.QMessageBox()
            msg.setWindowTitle("ERROR")
            msg.setIcon(QtWidgets.QMessageBox.Critical)
            msg.setText("Please use proper document!")
            msg.exec_()
        else:
            
            block1 = track_block.block("Blue Line","A1",0,0,50,"none",50,"A2","A2")
            block2 = track_block.block("Blue Line","A2",0,0,50,"none",50,"A3","A3")
            block3 = track_block.block("Blue Line","A3",0,0,50,"none",50,"A4","A4")
            block4 = track_block.block("Blue Line","A4",0,0,50,"none",50,"A5","A5")
            block5 = track_block.block("Blue Line","A5",0,0,50,"none",50,"B6","C11")
            block6 = track_block.block("Blue Line","B6",0,0,50,"none",50,"B7","A5")
            block7 = track_block.block("Blue Line","B7",0,0,50,"none",50,"B8","B8")
            block8 = track_block.block("Blue Line","B8",0,0,50,"none",50,"B9","B9")
            block9 = track_block.block("Blue Line","B9",0,0,50,"none",50,"B10","B10")
            block10 = track_block.block("Blue Line","B10",0,0,50,"Station B",50,"none","none")
            block11 = track_block.block("Blue Line","C11",0,0,50,"none",50,"C12","A5")
            block12 = track_block.block("Blue Line","C12",0,0,50,"none",50,"C13","C13")
            block13 = track_block.block("Blue Line","C14",0,0,50,"none",50,"C14","C14")
            block14 = track_block.block("Blue Line","C14",0,0,50,"none",50,"C15","C15")
            block15 = track_block.block("Blue Line","C15",0,0,50,"Station C",50,"none","none")
            
            self.track_info_table.setItem(1,0,QtWidgets.QTableWidgetItem("Blue Line"))
            self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Normal"))
            self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("None"))
            self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem("N/A"))
            
            self.track_list[0] = block1
            self.track_list[1] = block2
            self.track_list[2] = block3
            self.track_list[3] = block4
            self.track_list[4] = block5
            self.track_list[5] = block6
            self.track_list[6] = block7
            self.track_list[7] = block8
            self.track_list[8] = block9
            self.track_list[9] = block10
            self.track_list[10] = block11
            self.track_list[11] = block12
            self.track_list[12] = block13
            self.track_list[13] = block14
            self.track_list[14] = block15
            
            self.blue_line_len = 15
            
            self.select_track_combo.addItem(self.track_list[0].get_line_name())
            self.failure_line_select_combo.addItem(self.track_list[0].get_line_name())
            self.window.select_track_combo.addItem(self.track_list[0].get_line_name())
    
    def set_block_info_combo(self):
        i = 0
        while i < self.blue_line_len :
            self.select_block_combo.addItem(self.track_list[i].get_block_name())
            self.window.select_block_combo.addItem(self.track_list[i].get_block_name())
            i += 1
    
    def clear_failure(self):
        i = 0
        while i < len(self.track_list):
            if self.track_list[i].get_line_name() == self.window.select_track_combo.currentText():
                if self.track_list[i].get_block_name() == self.window.select_block_combo.currentText():
                    self.track_list[i].clear_failure()
                    self.set_block_status_table
                    self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Normal"))
                    self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("None"))
                    self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem("N/A"))
                    i = len(self.track_list)
            i += 1
    
    def toggle_switch(self):
         i = 0
         while i < len(self.track_list):
            if self.track_list[i].get_line_name() == self.window.select_track_combo.currentText():
                if self.track_list[i].get_block_name() == self.window.select_block_combo.currentText():
                    self.track_list[i].toggle_switch()
                    self.set_block_status_table()
                    i = len(self.track_list)
            i += 1
            
    def toggle_occupancy(self):
         i = 0
         while i < len(self.track_list):
            if self.track_list[i].get_line_name() == self.window.select_track_combo.currentText():
                if self.track_list[i].get_block_name() == self.window.select_block_combo.currentText():
                    self.track_list[i].toggle_occupancy()
                    self.set_block_status_table()
                    i = len(self.track_list)
            i += 1

    def set_block_status_table(self):
        i = 0
        
        while i < len(self.track_list):
            if self.track_list[i].get_line_name() == self.select_track_combo.currentText():
                if self.track_list[i].get_block_name() == self.select_block_combo.currentText():
                    self.block_status_table.setItem(0,0,QtWidgets.QTableWidgetItem(self.track_list[i].get_block_name()))
                    self.block_status_table.setItem(0,1,QtWidgets.QTableWidgetItem(str(self.track_list[i].get_length()) + " m"))
                    self.block_status_table.setItem(0,2,QtWidgets.QTableWidgetItem(str(self.track_list[i].get_grade()) + "%"))
                    self.block_status_table.setItem(0,3,QtWidgets.QTableWidgetItem(str(self.track_list[i].get_elevation()) + " m"))
                    self.block_status_table.setItem(0,4,QtWidgets.QTableWidgetItem(str(self.track_list[i].get_speed()) + " Km/Hr"))
                    self.block_status_table.setItem(0,5,QtWidgets.QTableWidgetItem("Above"))
                    if self.track_list[i].get_occupancy() == 1 :
                        self.block_status_table.setItem(0,6,QtWidgets.QTableWidgetItem("Occupied"))
                    else :
                        self.block_status_table.setItem(0,6,QtWidgets.QTableWidgetItem("Not Occupied"))
                    self.block_status_table.setItem(0,7,QtWidgets.QTableWidgetItem(self.track_list[i].get_station_name()))
                    if self.track_list[i].get_crossing() == 1 :
                        self.block_status_table.setItem(0,8,QtWidgets.QTableWidgetItem("Crossing Activated"))
                    else :
                        self.block_status_table.setItem(0,8,QtWidgets.QTableWidgetItem("Clear"))
                    if self.track_list[i].get_switch() == 1 :
                        self.block_status_table.setItem(0,9,QtWidgets.QTableWidgetItem(self.track_list[i].get_switch_forward_loc()))
                    else :
                        self.block_status_table.setItem(0,9,QtWidgets.QTableWidgetItem(self.track_list[i].get_next_loc()))
                    i = len(self.track_list)
            i += 1
            
    def randomize_broken_rail(self):
        line_s = self.failure_line_select_combo.currentText()
        if line_s == "Red Line":
             rand = random.randint(0,self.red_line_len -1)
             self.track_list[rand].toggle_fault_rail()
             msg = QtWidgets.QMessageBox()
             msg.setWindowTitle("Failure Initiated")
             msg.setIcon(QtWidgets.QMessageBox.Critical)
             msg.setText("Broken Rail on block " + self.track_list[rand].get_block_name() + "!")
             msg.exec_()
             self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
             self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Broken Rail"))
             self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
        else :
            if line_s == "Blue Line":
                rand = random.randint(0,self.blue_line_len -1)
                self.track_list[rand].toggle_fault_rail()
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Failure Initiated")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Broken Rail on block " + self.track_list[rand].get_block_name() + "!")
                msg.exec_()
                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Broken Rail"))
                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
            else:
                rand = random.randint(0,self.green_line_len -1)
                self.track_list[rand].toggle_fault_rail()
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Failure Initiated")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Broken Rail on block " + self.track_list[rand].get_block_name() + "!")
                msg.exec_()
                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Broken Rail"))
                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
    
    def randomize_circuit_failure(self):
        line_s = self.failure_line_select_combo.currentText()
        if line_s == "Red Line":
             rand = random.randint(0,self.red_line_len -1)
             self.track_list[rand].toggle_fault_circuit()
             msg = QtWidgets.QMessageBox()
             msg.setWindowTitle("Failure Initiated")
             msg.setIcon(QtWidgets.QMessageBox.Critical)
             msg.setText("Circuit Failure on " + self.track_list[rand].get_block_name() + "!")
             msg.exec_()
             self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
             self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Circuit Failure"))
             self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
        else :
            if line_s == "Blue Line":
                rand = random.randint(0,self.blue_line_len -1)
                self.track_list[rand].toggle_fault_circuit()
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Failure Initiated")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Circuit Failure on " + self.track_list[rand].get_block_name() + "!")
                msg.exec_()
                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Circuit Failure"))
                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
            else:
                rand = random.randint(0,self.green_line_len -1)
                self.track_list[rand].toggle_fault_circuit()
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Failure Initiated")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Circuit Failure on " + self.track_list[rand].get_block_name() + "!")
                msg.exec_()
                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Circuit Failure"))
                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
    
    def randomize_power_failure(self):
        line_s = self.failure_line_select_combo.currentText()
        if line_s == "Red Line":
             rand = random.randint(0,self.red_line_len -1)
             self.track_list[rand].toggle_fault_power()
             msg = QtWidgets.QMessageBox()
             msg.setWindowTitle("Failure Initiated")
             msg.setIcon(QtWidgets.QMessageBox.Critical)
             msg.setText("Power Failure on " + self.track_list[rand].get_block_name() + "!")
             msg.exec_()
             self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
             self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Power Failure"))
             self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
        else :
            if line_s == "Blue Line":
                rand = random.randint(0,self.blue_line_len -1)
                self.track_list[rand].toggle_fault_power()
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Failure Initiated")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Power Failure on " + self.track_list[rand].get_block_name() + "!")
                msg.exec_()
                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Power Failure"))
                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
            else:
                rand = random.randint(0,self.green_line_len -1)
                self.track_list[rand].toggle_fault_power()
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Failure Initiated")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.setText("Power Failure on " + self.track_list[rand].get_block_name() + "!")
                msg.exec_()
                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Power Failure"))
                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[rand].get_block_name()))
    
    def failure_select(self):
        line_s = self.failure_line_select_combo.currentText()
        fail_type = self.failure_type_combo.currentText()
        block_num = int(self.failure_text_box.toPlainText()) - 1
        if line_s == "Red Line" :
            if fail_type == "Broken Rail":
                if block_num >= self.red_line_len or block_num < 0:
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Error")
                    msg.setIcon(QtWidgets.QMessageBox.Critical)
                    msg.setText("Block Does Not Exist!")
                    msg.exec_()
                else :
                    self.track_list[block_num].toggle_fault_rail()
                    msg = QtWidgets.QMessageBox()
                    msg.setWindowTitle("Failure Initiated")
                    msg.setIcon(QtWidgets.QMessageBox.Critical)
                    msg.setText("Broken Rail on block " + self.track_list[block_num].get_block_name() + "!")
                    msg.exec_()
                    self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                    self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Broken Rail"))
                    self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
            else :
                if fail_type == "Circuit Failure" :
                    if block_num >= self.red_line_len or block_num < 0:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Error")
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Block Does Not Exist!")
                        msg.exec_()
                    else :
                        self.track_list[block_num].toggle_fault_circuit()
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Failure Initiated")
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Circuit Failure On " + self.track_list[block_num].get_block_name() + "!")
                        msg.exec_()
                        self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                        self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Circuit Failure"))
                        self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
                else:
                    if fail_type == "Power Failure" :
                        if block_num >= self.red_line_len or block_num < 0:
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Error")
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Block Does Not Exist!")
                            msg.exec_()
                        else :
                            self.track_list[block_num].toggle_fault_power()
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Failure Initiated")
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Power Failure On " + self.track_list[block_num].get_block_name() + "!")
                            msg.exec_()
                            self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                            self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Power Failure"))
                            self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
        else:
            if line_s == "Blue Line" :
                if fail_type == "Broken Rail":
                    if block_num >= self.blue_line_len or block_num < 0:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Error")
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Block Does Not Exist!")
                        msg.exec_()
                    else :
                        self.track_list[block_num].toggle_fault_rail()
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Failure Initiated")
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Broken Rail on block " + self.track_list[block_num].get_block_name() + "!")
                        msg.exec_()
                        self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                        self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Broken Rail"))
                        self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
                else :
                    if fail_type == "Circuit Failure" :
                        if block_num >= self.blue_line_len or block_num < 0 :
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Error")
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Block Does Not Exist!")
                            msg.exec_()
                        else :
                            self.track_list[block_num].toggle_fault_circuit()
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Failure Initiated")
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Circuit Failure On " + self.track_list[block_num].get_block_name() + "!")
                            msg.exec_()
                            self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                            self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Circuit Failure"))
                            self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
                    else:
                        if fail_type == "Power Failure" :
                            if block_num >= self.blue_line_len or block_num < 0:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Error")
                                msg.setIcon(QtWidgets.QMessageBox.Critical)
                                msg.setText("Block Does Not Exist!")
                                msg.exec_()
                            else :
                                self.track_list[block_num].toggle_fault_power()
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Failure Initiated")
                                msg.setIcon(QtWidgets.QMessageBox.Critical)
                                msg.setText("Power Failure On " + self.track_list[block_num].get_block_name() + "!")
                                msg.exec_()
                                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Power Failure"))
                                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
            else:
                if fail_type == "Broken Rail":
                    if block_num >= self.green_line_len or block_num < 0:
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Error")
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Block Does Not Exist!")
                        msg.exec_()
                    else :
                        self.track_list[block_num].toggle_fault_rail()
                        msg = QtWidgets.QMessageBox()
                        msg.setWindowTitle("Failure Initiated")
                        msg.setIcon(QtWidgets.QMessageBox.Critical)
                        msg.setText("Broken Rail on block " + self.track_list[block_num].get_block_name() + "!")
                        msg.exec_()
                        self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                        self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Broken Rail"))
                        self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
                else :
                    if fail_type == "Circuit Failure" :
                        if block_num >= self.green_line_len or block_num < 0 :
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Error")
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Block Does Not Exist!")
                            msg.exec_()
                        else :
                            self.track_list[block_num].toggle_fault_circuit()
                            msg = QtWidgets.QMessageBox()
                            msg.setWindowTitle("Failure Initiated")
                            msg.setIcon(QtWidgets.QMessageBox.Critical)
                            msg.setText("Circuit Failure On " + self.track_list[block_num].get_block_name() + "!")
                            msg.exec_()
                            self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                            self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Circuit Failure"))
                            self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
                    else:
                        if fail_type == "Power Failure" :
                            if block_num >= self.green_line_len or block_num < 0:
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Error")
                                msg.setIcon(QtWidgets.QMessageBox.Critical)
                                msg.setText("Block Does Not Exist!")
                                msg.exec_()
                            else :
                                self.track_list[block_num].toggle_fault_power()
                                msg = QtWidgets.QMessageBox()
                                msg.setWindowTitle("Failure Initiated")
                                msg.setIcon(QtWidgets.QMessageBox.Critical)
                                msg.setText("Power Failure On " + self.track_list[block_num].get_block_name() + "!")
                                msg.exec_()
                                self.track_info_table.setItem(1,1,QtWidgets.QTableWidgetItem("Down"))
                                self.track_info_table.setItem(1,2,QtWidgets.QTableWidgetItem("Power Failure"))
                                self.track_info_table.setItem(1,3,QtWidgets.QTableWidgetItem(self.track_list[block_num].get_block_name()))
    def show_test_window(self, checked):
        self.track_model_test_window.show()

if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    Track_Model = QtWidgets.QMainWindow()
    ui = Ui_Track_Model()
    ui.setupUi(Track_Model)
    Track_Model.show()
    sys.exit(app.exec_())